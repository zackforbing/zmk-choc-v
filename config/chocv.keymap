/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&soft_off { hold-time-ms = <0>; };

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <1 12 23>;
        };

        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <8 17 26>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 14>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <2 13>;
        };

        hold_space {
            bindings = <&kp SPACE>;
            key-positions = <23 32>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        toggle_nav {
            bindings = <&tog 2>;
            key-positions = <11 2 13>;
            layers = <0 2>;
            require-prior-idle-ms = <350>;
        };

        jsdoc {
            bindings = <&jsdoc>;
            key-positions = <29 28>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 12 16 17>;
        };

        screen_shot {
            bindings = <&kp LS(LG(N5))>;
            key-positions = <0 11>;
        };

        soft_off {
            bindings = <&soft_off>;
            key-positions = <0 32 9 33>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <4 14 5 15>;
        };

        bt_clear_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <20 21 29 28 22 27>;
        };

        reset {
            bindings = <&sys_reset>;
            key-positions = <30 31 32 33 34 35>;
        };

        globe {
            bindings = <&kp GLOBE>;
            key-positions = <4 5>;
        };

        toggle_win {
            bindings = <&tog 1>;
            key-positions = <0 9>;
        };

        screenshot_win {
            bindings = <&kp LS(LG(S))>;
            key-positions = <0 11>;
            layers = <1>;
        };

        force_quit_mac {
            bindings = <&kp LA(LG(ESCAPE))>;
            key-positions = <0 1 2>;
        };
    };

    behaviors {
        hml: HOMEROW_L_MODS {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_L_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <190>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 33 34 29 35>;
        };

        hsl: HOMEROW_L_SHIFT {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_L_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <190>;
            flavor = "balanced";
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <5 15 25 6 16 26 7 8 9 9 17 18 19 27 28 34 33 29 35>;
        };

        com_scln: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pd_cln: period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hmr: HOMEROW_R_MODS {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_R_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <190>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 32 31 30>;
        };

        hsr: HOMEROW_R_SHIFT {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_R_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <190>;
            flavor = "balanced";
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 31 32 30>;
        };
    };

    };

    macros {
        jsdoc: jsdoc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR &kp STAR &kp SPACE>;
            label = "JSDOC";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q        &kp W       &kp E           &kp R        &kp T          &kp Y            &kp U         &kp I            &kp O       &kp P
  &hml LCTRL A  &hml LALT S  &hml LEFT_GUI D  &hsl LSHFT F  &kp G          &kp H            &hsr RSHFT J   &hmr RIGHT_GUI K  &hmr LALT L  &hmr RCTRL SINGLE_QUOTE
  &kp Z        &kp X       &kp C           &kp V        &kp B          &kp N            &kp M         &com_scln        &prd_cln     &kp FSLH
                           &kp GLOBE       &lt 4 TAB    &lt 2 SPACE    &lt 4 BACKSPACE  &lt 2 DELETE  &kp RCTRL
            >;
        };

        base_win {
            bindings = <
  &trans      &trans  &trans       &trans  &trans    &trans  &trans  &trans       &trans  &trans
  &hml LGUI A  &trans  &hml LCTRL D  &trans  &trans    &trans  &trans  &hm RCTRL K  &trans  &hmr RGUI SQT
  &trans      &trans  &trans       &trans  &trans    &trans  &trans  &trans       &trans  &trans
                      &trans       &trans  &trans    &trans  &trans  &trans
            >;
        };

        numsym {
            // -----------------------------------------------------------------------------------------
            // |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |
            // |  !  |  @  |  #  |  $  |  %  |  ^  |  &  |  *  |  =  |  -  |
            // |  \  |  {  |  [  |  (  |  _  |  )  |  ]  |  }  |  .  |  `  |
            //             | CTL | ALT |  ENT | SPC | GUI  | CTL |

            bindings = <
  &kp N1              &kp N2           &kp N3           &kp N4             &kp N5        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp UNDER       &kp PLUS            &kp TILDE
  &hml LCTRL NUMBER_6  &hml LEFT_ALT N7  &hml LEFT_GUI N8  &hsl LEFT_SHIFT N9  &kp N0        &kp LEFT_BRACKET      &hsr RSHFT RIGHT_BRACKET  &hmr RCMD MINUS  &hmr LEFT_ALT EQUAL  &hmr RCTRL GRAVE
  &kp PLUS            &kp MINUS        &kp ASTERISK     &kp SLASH          &kp KP_DOT    &kp LEFT_BRACE        &kp RIGHT_BRACE          &kp SEMICOLON   &kp COLON           &kp BACKSLASH
                                       &trans           &mo 6              &trans        &mo 6                 &trans                   &trans
            >;
        };

        numsym_win {
            bindings = <
  &trans             &trans  &trans        &trans  &trans    &trans  &trans  &trans           &trans  &trans
  &hml LGUI NUMBER_6  &trans  &hml LCTRL N8  &trans  &trans    &trans  &trans  &hmr RCTRL MINUS  &trans  &hmr RGUI GRAVE
  &trans             &trans  &trans        &trans  &trans    &trans  &trans  &trans           &trans  &trans
                             &trans        &trans  &trans    &trans  &trans  &trans
            >;
        };

        navfunc {
            // -----------------------------------------------------------------------------------------
            // |BTCLR| RST |     |      |     |      | PGDN |  UP  | PGUP |      |
            // | BT0 |CMENU|     |      |     | HOME | LEFT | DOWN |RIGHT | END  |
            // | BT1 | BOOT|     |      |     |      |      |      |      |      |
            //             | CTL | ALT |  ENT | SPC | GUI  | CTL |

            bindings = <
  &mt LEFT_SHIFT PG_UP  &mt LEFT_ALT HOME  &mt LG(LEFT_SHIFT) UP_ARROW  &mt LEFT_ALT END  &kp LS(LA(LC(BACKSLASH)))    &trans      &kp F9        &kp F10          &kp F11          &kp F12
  &mt LALT PAGE_DOWN    &kp LEFT_ARROW     &kp DOWN                     &kp RIGHT         &kp BACKSPACE                &kp DELETE  &hsr LSHFT F5  &hmr LEFT_GUI F6  &hmr LEFT_ALT F7  &hmr LCTRL F8
  &kp LG(Z)             &kp LG(X)          &kp LG(C)                    &kp LG(V)         &kp LS(LG(K))                &trans      &kp F1        &kp F2           &kp F3           &kp F4
                                           &trans                       &trans            &mo 6                        &trans      &mo 6         &trans
            >;
        };

        navfunc_win {
            bindings = <
  &trans               &mt LALT HOME  &trans     &mt LALT END  &trans           &trans  &trans  &trans        &trans  &trans
  &hm LCTRL PAGE_DOWN  &trans         &trans     &trans        &trans           &trans  &trans  &hmr RCTRL F6  &trans  &hmr RGUI F8
  &kp LC(Z)            &kp LC(X)      &kp LC(C)  &kp LC(V)     &kp LS(LC(K))    &trans  &trans  &trans        &trans  &trans
                                      &trans     &trans        &trans           &trans  &trans  &trans
            >;
        };

        Admin {
            bindings = <
  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4         &bootloader  &trans  &trans  &trans  &bt BT_CLR_ALL
  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4        &trans       &trans  &trans  &trans  &trans
  &bt BT_CLR     &trans         &trans         &out OUT_TOG   &ext_power EP_TOG    &trans       &trans  &trans  &trans  &sys_reset
                                &trans         &trans         &trans               &trans       &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        num_sym_win {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        nav_func_win {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
